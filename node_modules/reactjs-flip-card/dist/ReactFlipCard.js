import * as React from "react";
import { useEffect, useState } from "react";
import "./ReactFlipCard.css";
var Direction;
(function (Direction) {
    Direction["vertical"] = "vertical";
    Direction["horizontal"] = "horizontal";
    Direction["diagonal"] = "diagonal";
})(Direction || (Direction = {}));
var FlipTrigger;
(function (FlipTrigger) {
    FlipTrigger["onClick"] = "onClick";
    FlipTrigger["onHover"] = "onHover";
    FlipTrigger["disabled"] = "disabled";
})(FlipTrigger || (FlipTrigger = {}));
function getDirectionCssClass(direction) {
    switch (direction) {
        case Direction.vertical:
            return 'ReactFlipCard__rotateX180Deg';
        case Direction.horizontal:
            return 'ReactFlipCard__rotateY180Deg';
        case Direction.diagonal:
            return 'ReactFlipCard__rotateDiagonal';
        default:
            return 'ReactFlipCard__rotateY180Deg';
    }
}
export default function ReactFlipCard({ containerStyle = {}, containerCss = '', flipCardStyle = {}, flipCardCss = '', frontStyle = {}, frontCss = '', backStyle = {}, backCss = '', direction = Direction.horizontal, flipTrigger = FlipTrigger.onHover, flipByProp = undefined, frontComponent = React.createElement("div", null, "Front"), backComponent = React.createElement("div", null, "Back"), onClick = () => undefined, onMouseEnter = () => undefined, onMouseLeave = () => undefined }) {
    const [isFlipped, setIsFlipped] = useState(false);
    useEffect(() => {
        if (flipByProp !== undefined)
            setIsFlipped(flipByProp);
    }, [flipByProp]);
    return (React.createElement("div", { style: containerStyle, className: `ReactFlipCard__container ${containerCss} `, onMouseEnter: (e) => {
            if (flipTrigger === FlipTrigger.onHover) {
                setIsFlipped(!isFlipped);
            }
            onMouseEnter(e);
        }, onMouseLeave: (e) => {
            if (flipTrigger === FlipTrigger.onHover) {
                setIsFlipped(!isFlipped);
            }
            onMouseLeave(e);
        }, onClick: (e) => {
            if (flipTrigger === FlipTrigger.onClick) {
                setIsFlipped(!isFlipped);
            }
            onClick(e);
        } },
        React.createElement("div", { className: `ReactFlipCard__flipCard ${flipCardCss} ${isFlipped ? getDirectionCssClass(direction) : ''}`, style: flipCardStyle },
            React.createElement("div", { className: `ReactFlipCard__flipCardFront ${frontCss}`, style: frontStyle }, frontComponent),
            React.createElement("div", { className: `ReactFlipCard__flipCardBack ${backCss} ${getDirectionCssClass(direction)}`, style: backStyle }, backComponent))));
}
